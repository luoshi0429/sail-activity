<style lang="less" scoped>
</style>
<template>
</template>
<script>
// 现在强依赖于pop-box组件
import wepy from 'wepy'
import Api from '@/helper/api.js'
import store from '@/store/index.js'
import { UpdateUserInfoSuccess } from '@/store/actions'
import { connect } from 'wepy-redux'

@connect({
  user (state) {
    return state.user
  },
  app (state) {
    return state.app
  }
})
export default class extends wepy.component {
  props = {
    limit: {
      type: String,
      default: ''
    },
    description: {
      type: String,
      default: '为了更好的观看内容，请开启授权'
    },
    type: {
      type: String,
      default: 'confirm'
    },
    needAuth: {
      type: Boolean,
      default: false
    }
  }

  components = {
  };
  checkNeedShowTip () {
    if (this.limit) {
      let lastTime = wepy.getStorageSync('last_show_time')
      let lastDate = new Date(lastTime)
      let endDate = null
      if (this.limit === 'NextDay' && lastTime) {
        endDate = new Date(lastDate.getFullYear(), lastDate.getMonth(), lastDate.getDate() + 1)
        return new Date() > endDate
      }
    }
    return true
  }
  events = {
    saveUser () {
      // 没有unionId同时已过限制期
      if (!this.app.isAuditing && !this.user.unionId) {
        if (this.checkNeedShowTip()) {
          // 如果需要强制授权，则锁定为alert
          this.$parent.$broadcast(this.app.needAuth ? 'alert' : this.type, {
            title: '温馨提示',
            subTitle: this.description,
            cancel: {
              type: 'normal',
              text: '取消'
            },
            confirm: {
              type: 'userinfo',
              text: '去授权',
              onSave: (data, close) => {
                this.saveCustomer(data)
                close()
              },
              onCancelSave: (close) => {
                if (!this.app.needAuth && !this.needAuth) {
                  close()
                }
                this.$emit('onCancelSaveUserInfo')
              }
            }
          })
          if (this.limit) {
            wepy.setStorageSync('last_show_time', +new Date())
          }
        }
      }
    }
  };
  saveCustomer ({ userInfo, encryptedData, iv }) {
    this.decryptCustomerData(encryptedData, iv).then(({ unionId }) => {
      userInfo.unionId = unionId
      const paramSkynetObj = this.app.paramSkynet ? { paramSkynet: this.app.paramSkynet } : {}
      Api.saveCustomer({
        ...userInfo,
        nickname: userInfo.nickName,
        ...paramSkynetObj
      }).then(() => {
        store.dispatch({
          type: UpdateUserInfoSuccess,
          payload: userInfo
        })
        this.$emit('onSaveUserInfo', userInfo)
      })
    })
  }

  decryptCustomerData (encryptedData, iv) {
    return Api.getOpenIdPromise(true).then(({ openid, session_key }) => {
      return Api.post('customer/decryptCustomerData', {
        encryptedData,
        iv,
        sessionKey: session_key
      }).then(data => {
        const result = JSON.parse(data.decryptedData)
        return result
      })
    })
  }
}
</script>
